<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Planilha de Controlo de Prazos</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Tailwind gray-100 */
        }
        .container {
            max-width: 1200px; 
            margin: 2rem auto;
            padding: 1.5rem;
            background-color: white;
            border-radius: 0.5rem; 
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); 
        }
        th {
            background-color: #e5e7eb; /* Tailwind gray-200 */
        }
        /* Cores de status atualizadas */
        .status-vencido { background-color: #fecaca; color: #991b1b; /* red-200, red-800 */ }
        .status-vence-hoje { background-color: #fed7aa; color: #9a3412; /* orange-200, orange-800 */ }
        .status-urgente { background-color: #fde68a; color: #92400e; /* amber-200, amber-800 */ }
        .status-atencao { background-color: #fef08a; color: #713f12; /* yellow-200, yellow-900 */ }
        .status-em-dia { background-color: #bbf7d0; color: #166534; /* green-200, green-800 */ }
        .status-mais-de-14-dias { background-color: #bfdbfe; color: #1e40af; /* blue-200, blue-800 */ }


        .modal {
            display: none; /* Escondido por defeito */
            position: fixed; /* Fica no lugar */
            z-index: 100; /* Fica no topo */
            left: 0;
            top: 0;
            width: 100%; /* Largura total */
            height: 100%; /* Altura total */
            overflow: auto; /* Permite scroll se necessário */
            background-color: rgba(0,0,0,0.4); /* Preto com opacidade */
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto; /* 15% do topo e centrado */
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Pode ser mais ou menos, dependendo do tamanho do ecrã */
            max-width: 400px;
            border-radius: 0.5rem;
            text-align: center;
        }
        .modal-buttons button {
            margin: 0 10px;
            padding: 10px 20px;
            border-radius: 0.375rem;
            cursor: pointer;
        }
        .modal-buttons .confirm-btn {
            background-color: #dc2626; /* Tailwind red-600 */
            color: white;
        }
        .modal-buttons .cancel-btn {
            background-color: #e5e7eb; /* Tailwind gray-200 */
        }
        .table-container {
            overflow-x: auto; /* Adiciona scroll horizontal em ecrãs pequenos */
        }
        .form-grid > div {
            margin-bottom: 1rem; /* Adiciona espaço abaixo de cada campo em mobile */
        }

        @media (max-width: 768px) { /* Mobile */
            .container {
                margin: 1rem;
                padding: 1rem;
            }
            input[type="text"], input[type="date"], button {
                font-size: 0.95rem; /* Ajusta o tamanho da fonte para melhor leitura em mobile */
            }
            th, td {
                padding: 0.75rem 0.4rem; /* Padding ligeiramente reduzido */
                font-size: 0.8rem; /* Fonte ligeiramente reduzida */
                white-space: nowrap; /* Evita quebra de linha excessiva, mas pode precisar de ajuste */
            }
            .modal-content {
                width: 90%;
            }
            .form-grid {
                grid-template-columns: 1fr; /* Uma coluna em mobile */
            }
            .form-grid > div {
                grid-column: span 1 / span 1 !important; /* Garante que cada item ocupe a largura total */
            }
            .add-button-container {
                text-align: center; /* Centraliza o botão em mobile */
            }
        }
        @media (min-width: 769px) and (max-width: 1023px) { /* Tablet */
            .form-grid {
                grid-template-columns: repeat(2, 1fr); /* Duas colunas em tablet */
            }
            /* Faz a descrição ocupar a largura total se for o único na linha ou se for mais comprido */
            .form-grid div[data-field="descricaoProcesso"] {
                grid-column: span 2 / span 2;
            }
             .form-grid div[data-field="procurador"] { /* Procurador pode ficar ao lado da data */
                grid-column: span 1 / span 1;
            }
             .form-grid div[data-field="dataPrazo"] {
                grid-column: span 1 / span 1;
            }
        }
        @media (min-width: 1024px) { /* Desktop */
             .form-grid {
                grid-template-columns: 1fr 1fr 2fr 1fr; /* Layout para desktop */
            }
        }
    </style>
</head>
<body class="p-4">

    <div class="container">
        <h1 class="text-3xl font-bold text-center text-gray-700 mb-8">Controlo de Prazos de Processos</h1>

        <div class="mb-8 p-6 bg-gray-50 rounded-lg shadow">
            <h2 class="text-xl font-semibold text-gray-700 mb-4">Adicionar Novo Processo</h2>
            <div class="form-grid grid lg:grid-cols-5 gap-4 items-end">
                <div data-field="numeroProcesso">
                    <label for="numeroProcesso" class="block text-sm font-medium text-gray-700 mb-1">Nº do Processo</label>
                    <input type="text" id="numeroProcesso" name="numeroProcesso" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Ex: 00123/2024">
                </div>
                <div data-field="procurador" class="lg:col-span-1">
                    <label for="procurador" class="block text-sm font-medium text-gray-700 mb-1">Procurador(a)</label>
                    <input type="text" id="procurador" name="procurador" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Ex: Dr. Silva">
                </div>
                <div data-field="descricaoProcesso" class="lg:col-span-2">
                    <label for="descricaoProcesso" class="block text-sm font-medium text-gray-700 mb-1">Descrição do Processo</label>
                    <input type="text" id="descricaoProcesso" name="descricaoProcesso" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Ex: Elaborar relatório XPTO">
                </div>
                <div data-field="dataPrazo">
                    <label for="dataPrazo" class="block text-sm font-medium text-gray-700 mb-1">Data do Prazo</label>
                    <input type="date" id="dataPrazo" name="dataPrazo" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                </div>
            </div>
            <div class="mt-6 text-center md:text-right add-button-container">
                <button onclick="adicionarProcesso()" class="w-full md:w-auto inline-flex justify-center items-center px-6 py-2 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
                    </svg>
                    Adicionar Processo
                </button>
            </div>
            <p id="mensagemErro" class="text-red-500 text-sm mt-2"></p>
        </div>

        <div class="table-container">
            <table class="min-w-full divide-y divide-gray-200 border border-gray-200 rounded-lg shadow-sm">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nº Processo</th>
                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Procurador(a)</th>
                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Descrição</th>
                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Data do Prazo</th>
                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dias Restantes</th>
                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ações</th>
                    </tr>
                </thead>
                <tbody id="corpoTabelaProcessos" class="bg-white divide-y divide-gray-200">
                    </tbody>
            </table>
        </div>
        <p id="semProcessos" class="text-center text-gray-500 mt-6 hidden">Nenhum processo cadastrado ainda.</p>
    </div>

    <div id="confirmationModal" class="modal">
        <div class="modal-content">
            <p class="text-lg font-semibold mb-4">Confirmar Exclusão</p>
            <p class="mb-6">Tem certeza de que deseja excluir este processo?</p>
            <div class="modal-buttons">
                <button id="confirmDeleteBtn" class="confirm-btn">Excluir</button>
                <button id="cancelDeleteBtn" class="cancel-btn">Cancelar</button>
            </div>
        </div>
    </div>

    <script>
        // Constantes para os limites de dias para os status
        const LIMITE_URGENTE = 3; 
        const LIMITE_ATENCAO = 7; 
        const LIMITE_MAIS_DE_14_DIAS = 14; // Novo limite

        // Função para carregar processos do localStorage ao iniciar
        window.onload = function() {
            carregarProcessos();
            // Define a data mínima para o campo de data do prazo como hoje
            document.getElementById('dataPrazo').min = new Date().toISOString().split("T")[0];
        };

        // Função para normalizar a data para UTC, evitando problemas de fuso horário
        function normalizarData(dataString) {
            // Divide a string da data (YYYY-MM-DD) em ano, mês e dia
            const [ano, mes, dia] = dataString.split('-').map(Number);
            // Cria um objeto Date em UTC (mês é 0-indexado)
            return new Date(Date.UTC(ano, mes - 1, dia));
        }

        // Função para calcular os dias restantes até o prazo
        function calcularDiasRestantes(dataPrazoString) {
            const dataPrazo = normalizarData(dataPrazoString);
            // Pega a data de hoje, também normalizada para UTC
            const hoje = normalizarData(new Date().toISOString().split("T")[0]); 

            // Calcula a diferença em milissegundos entre as datas
            const diferencaEmMilissegundos = dataPrazo.getTime() - hoje.getTime();
            // Converte a diferença para dias e arredonda para cima
            const diasRestantes = Math.ceil(diferencaEmMilissegundos / (1000 * 60 * 60 * 24));
            return diasRestantes;
        }

        // Função para determinar o status do processo com base nos dias restantes
        function determinarStatus(diasRestantes) {
            if (diasRestantes < 0) {
                return { texto: "Vencido", classe: "status-vencido" };
            } else if (diasRestantes === 0) {
                return { texto: "Vence Hoje", classe: "status-vence-hoje" };
            } else if (diasRestantes <= LIMITE_URGENTE) { // 1 a 3 dias
                return { texto: `Urgente (${diasRestantes} dia${diasRestantes > 1 ? 's' : ''})`, classe: "status-urgente" };
            } else if (diasRestantes <= LIMITE_ATENCAO) { // 4 a 7 dias
                return { texto: `Atenção (${diasRestantes} dias)`, classe: "status-atencao" };
            } else if (diasRestantes <= LIMITE_MAIS_DE_14_DIAS) { // 8 a 14 dias
                return { texto: "Em Dia", classe: "status-em-dia" };
            } else { // Mais de 14 dias
                return { texto: "Mais de 14 dias", classe: "status-mais-de-14-dias" };
            }
        }

        // Função para adicionar um novo processo à lista
        function adicionarProcesso() {
            const numeroProcessoInput = document.getElementById('numeroProcesso');
            const procuradorInput = document.getElementById('procurador'); 
            const descricaoInput = document.getElementById('descricaoProcesso');
            const dataPrazoInput = document.getElementById('dataPrazo');
            const mensagemErroEl = document.getElementById('mensagemErro');

            const numeroProcesso = numeroProcessoInput.value.trim();
            const procurador = procuradorInput.value.trim(); 
            const descricao = descricaoInput.value.trim();
            const dataPrazo = dataPrazoInput.value;

            mensagemErroEl.textContent = ''; // Limpa mensagens de erro anteriores

            // Validação: descrição e data do prazo são obrigatórias
            if (!descricao || !dataPrazo) {
                mensagemErroEl.textContent = 'Por favor, preencha a descrição e a data do prazo.';
                return;
            }
            
            // Validação: data do prazo não pode ser no passado
            const hoje = new Date().toISOString().split("T")[0];
            if (dataPrazo < hoje) {
                 mensagemErroEl.textContent = 'A data do prazo não pode ser anterior à data de hoje.';
                 return;
            }

            const idProcesso = Date.now().toString(); // Gera um ID único simples
            const diasRestantes = calcularDiasRestantes(dataPrazo);
            const statusInfo = determinarStatus(diasRestantes);

            // Cria o objeto do novo processo
            const novoProcesso = {
                id: idProcesso,
                numeroProcesso: numeroProcesso,
                procurador: procurador, 
                descricao: descricao,
                dataPrazo: dataPrazo,
                diasRestantes: diasRestantes, // Armazenado para ordenação
                statusTexto: statusInfo.texto,
                statusClasse: statusInfo.classe
            };

            // Recupera processos existentes do localStorage ou inicia uma lista vazia
            let processos = JSON.parse(localStorage.getItem('processos')) || [];
            processos.push(novoProcesso);
            // Salva a lista atualizada no localStorage
            localStorage.setItem('processos', JSON.stringify(processos));

            renderizarTabela(); // Atualiza a exibição da tabela
            // Limpa os campos do formulário
            numeroProcessoInput.value = ''; 
            procuradorInput.value = ''; 
            descricaoInput.value = '';
            dataPrazoInput.value = '';
        }

        // Função para renderizar a tabela de processos
        function renderizarTabela() {
            const corpoTabela = document.getElementById('corpoTabelaProcessos');
            const semProcessosMsg = document.getElementById('semProcessos');
            corpoTabela.innerHTML = ''; // Limpa a tabela antes de recriá-la

            let processos = JSON.parse(localStorage.getItem('processos')) || [];
            // Ordena os processos por dias restantes (mais urgentes primeiro)
            processos.sort((a, b) => a.diasRestantes - b.diasRestantes);

            if (processos.length === 0) {
                semProcessosMsg.classList.remove('hidden'); // Mostra mensagem se não houver processos
            } else {
                semProcessosMsg.classList.add('hidden'); // Esconde a mensagem
                processos.forEach(processo => {
                    const linha = corpoTabela.insertRow(); // Cria uma nova linha na tabela

                    // Célula Nº Processo
                    const celulaNumProcesso = linha.insertCell();
                    celulaNumProcesso.textContent = processo.numeroProcesso || '-'; // Exibe '-' se vazio
                    celulaNumProcesso.className = 'px-4 py-2 whitespace-nowrap text-sm text-gray-700 text-center';

                    // Célula Procurador(a)
                    const celulaProcurador = linha.insertCell();
                    celulaProcurador.textContent = processo.procurador || '-'; // Exibe '-' se vazio
                    celulaProcurador.className = 'px-4 py-2 whitespace-nowrap text-sm text-gray-700 text-left';

                    // Célula Descrição
                    const celulaDescricao = linha.insertCell();
                    celulaDescricao.textContent = processo.descricao;
                    // Permite quebra de linha para descrições longas, ajustando o alinhamento
                    celulaDescricao.className = 'px-4 py-2 text-sm text-gray-700 text-left'; 

                    // Célula Data Prazo
                    const celulaDataPrazo = linha.insertCell();
                    // Formata a data para o padrão pt-BR
                    const dataPrazoObj = normalizarData(processo.dataPrazo); // Garante que é UTC
                    const dataPrazoFormatada = new Date(dataPrazoObj.getUTCFullYear(), dataPrazoObj.getUTCMonth(), dataPrazoObj.getUTCDate()).toLocaleDateString('pt-BR');
                    celulaDataPrazo.textContent = dataPrazoFormatada;
                    celulaDataPrazo.className = 'px-4 py-2 whitespace-nowrap text-sm text-gray-700 text-center';
                    
                    // Célula Dias Restantes
                    const celulaDiasRestantes = linha.insertCell();
                    if (processo.diasRestantes < 0) {
                        celulaDiasRestantes.textContent = `Vencido há ${Math.abs(processo.diasRestantes)} dia(s)`;
                    } else if (processo.diasRestantes === 0) {
                        celulaDiasRestantes.textContent = "Hoje";
                    } else {
                        celulaDiasRestantes.textContent = `${processo.diasRestantes} dia(s)`;
                    }
                    celulaDiasRestantes.className = 'px-4 py-2 whitespace-nowrap text-sm text-gray-700 text-center';
                    
                    // Célula Status
                    const celulaStatus = linha.insertCell();
                    celulaStatus.textContent = processo.statusTexto;
                    celulaStatus.className = `px-4 py-2 text-sm font-semibold whitespace-nowrap text-center ${processo.statusClasse}`;

                    // Célula Ações (botão de remover)
                    const celulaAcoes = linha.insertCell();
                    const botaoRemover = document.createElement('button');
                    botaoRemover.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500 hover:text-red-700" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>`;
                    botaoRemover.title = "Remover Processo";
                    botaoRemover.onclick = function() { mostrarModalConfirmacao(processo.id); };
                    botaoRemover.className = "p-1 rounded hover:bg-gray-100"; // Estilização do botão
                    celulaAcoes.appendChild(botaoRemover);
                    celulaAcoes.className = 'px-4 py-2 whitespace-nowrap text-sm text-gray-700 text-center';
                });
            }
        }

        // Função para exibir o modal de confirmação de exclusão
        function mostrarModalConfirmacao(processoId) {
            const modal = document.getElementById('confirmationModal');
            modal.style.display = 'block'; // Torna o modal visível

            const confirmBtn = document.getElementById('confirmDeleteBtn');
            const cancelBtn = document.getElementById('cancelDeleteBtn');

            // Clona e substitui o botão de confirmação para evitar múltiplos listeners
            const novoConfirmBtn = confirmBtn.cloneNode(true);
            confirmBtn.parentNode.replaceChild(novoConfirmBtn, confirmBtn);
            
            novoConfirmBtn.onclick = function() {
                removerProcesso(processoId);
                modal.style.display = 'none'; // Esconde o modal após confirmar
            }
            cancelBtn.onclick = function() {
                modal.style.display = 'none'; // Esconde o modal ao cancelar
            }
            // Fecha o modal se o utilizador clicar fora da área do conteúdo do modal
            window.onclick = function(event) {
                if (event.target == modal) {
                    modal.style.display = "none";
                }
            }
        }

        // Função para remover um processo da lista
        function removerProcesso(idProcesso) {
            let processos = JSON.parse(localStorage.getItem('processos')) || [];
            // Filtra a lista, mantendo apenas os processos cujo ID não corresponde ao ID a ser removido
            processos = processos.filter(p => p.id !== idProcesso);
            localStorage.setItem('processos', JSON.stringify(processos));
            renderizarTabela(); // Atualiza a tabela
        }

        // Função para carregar os processos (chamada no onload da página)
        function carregarProcessos() {
            renderizarTabela();
        }

    </script>
</body>
</html>
